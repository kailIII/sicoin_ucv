(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1025, u"Error on rename of \'./db_sicoin/#sql-461_a2\' to \'./db_sicoin/correspondencia_archive\' (errno: 150)")'
p3
sS'layer'
p4
S'/home/perdomor/web2py/applications/sicoin/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(\'mysql://root:12345@localhost/db_sicoin\')\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db = db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\ndb.define_table(\'dependencia\',\n    Field(\'dependencia\', \'string\', length=100, required= True, notnull=True, unique=True),\n    format = "%(dependencia)s",\n    singular = "Dependencia",\n    plural = "Dependencias",    \n)\n\n#db.dependencia.id.format = "%(nombre)s"\n#db.dependencia.id.represent= lambda id, row: db.dependencia[id].nombre\n\ndb.define_table(\'departamento\',\n    Field(\'departamento\', \'string\', length=100, required= True, notnull=True),\n    Field(\'dependencia\', \'reference dependencia\'),\n    format = "%(departamento)s",\n    singular = "Departamento",\n    plural = "Departamentos",    \n)\n#db.departamento.dependencia.requires = IS_IN_DB(db, \'dependencia.id\', \'%(nombre)s\', \n #                                              zero=\'--Seleccione una dependencia--\', error_message=\'Valor no Permitido\')\n\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\n# after\n# auth = Auth(globals(),db)\n#db.define_table(\n#    auth.settings.table_user_name,\n#    Field(\'first_name\', length=128, label = \'nombre\'),\n#    Field(\'last_name\', length=128, label = \'apellido\'),\n#    Field(\'email\', length=128, unique=True),\n#    Field(\'password\', \'password\', length=512, readable=False, label=\'Password\'),\n#    Field(\'registration_key\', length=512, writable=False, readable=False, default=\'\'),\n#    Field(\'reset_password_key\', length=512, writable=False, readable=False, default=\'\'),\n#    Field(\'registration_id\', length=512, writable=False, readable=False, default=\'\'),\n#    Field(\'departamento\', \'reference departamento\'),\n#    )\n#    \n#custom_auth_table = db[auth.settings.table_user_name] # get the custom_auth_table\n#custom_auth_table.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\n#custom_auth_table.last_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\n#custom_auth_table.password.requires = [CRYPT()]\n#custom_auth_table.email.requires = [IS_EMAIL(error_message=auth.messages.invalid_email),\n#                                    IS_NOT_IN_DB(db, custom_auth_table.email)]\n#auth.settings.table_user = custom_auth_table # tell auth to use custom_auth_table\n# before\n# auth.define_tables()\nauth.settings.extra_fields[\'auth_user\'] = [Field(\'departamento\', \'reference departamento\')]\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\ndb.auth_user._represent = \'%(first_name)s %(last_name)s\'\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename=\'private/janrain.key\')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n\ndb.define_table(\'estatus\',\n    Field(\'tipo_estatus\', \'string\', length=100, required= True, notnull=True, unique=True),\n    format = "%(tipo_estatus)s",\n    singular = "Estatus",\n    plural = "Estatus",    \n)\n\ndb.define_table(\'documento\',\n    Field(\'tipo_de_documento\', \'string\', length=100, required= True, notnull=True, unique=True),\n    format = "%(tipo_de_documento)s",\n    singular = "Tipo de documento",\n    plural = "Tipos de documentos",    \n)\n\ndb.define_table(\'correspondencia\',\n    Field(\'nro_de_documento\', \'string\', length=100, required= True, notnull=True),\n    Field(\'fecha_registro\', \'datetime\', default=request.now,writable=False,readable=False),\n    Field(\'fecha_correspondencia\', \'date\', required= True, notnull=True),\n    Field(\'tipo_de_documento\', \'reference documento\'),\n    Field(\'estatus\', \'reference estatus\'),\n    Field(\'remitente\', \'string\', length=100, required= True, notnull=True),\n    Field(\'departamento_origen\', \'reference departamento\'),\n    Field(\'destinatario\', \'string\', length=100, required= True, notnull=True),\n    Field(\'departamento_destino\', \'reference departamento\'),\n    Field(\'asunto\', \'string\', length=100, notnull=True),\n    Field(\'observaciones\', \'text\', length=250, notnull=False),\n    Field(\'asignado_a\', db.auth_user),\n    #, \'auth_user.id\', \'%(first_name)s %(last_name)s\')),\n    Field(\'registrado_por\', db.auth_user, default = (auth.user.id) if auth.user else None, writable=False,readable=True),\n    #format = "%(nro_de_documento)s",\n    singular = "Dependencia",\n    plural = "Dependencias",    \n)\n\n#db.correspondencia.asignado_a.requires = IS_IN_DB(db(db.auth_user.departamento==session.auth.user.departamento), db.auth_user.id) if auth.is_logged_in() else None\n\ndb.correspondencia.id.readable = False\nif auth.is_logged_in():\n    db.correspondencia.asignado_a.requires = IS_IN_DB(db(db.auth_user.departamento==session.auth.user.departamento), db.auth_user.id,\'%(first_name)s %(last_name)s\')\ndb.correspondencia.departamento_origen.requires = IS_IN_DB(db, db.departamento.id, \'%(nombre)s\')                                               \ndb.correspondencia.departamento_destino.requires = IS_IN_DB(db, db.departamento.id, \'%(nombre)s\')\n#db.dog.owner.requires = IS_IN_DB(db, db.person.id, lambda row: db(db.othertable.foreign_key == row.reference_key).select().first().somefield)\n                                               \nclass CascadingSelect(object):\n    def __init__(self, *tables):\n        self.tables = tables \n        self.prompt = lambda table:str(table)   \n    def widget(self,f,v):\n        import uuid\n        uid = str(uuid.uuid4())[:8]\n        d_id = "cascade-" + uid\n        wrapper = TABLE(_id=d_id)\n        parent = None; parent_format = None; \n        fn =  \'\' \n        vr = \'var dd%s = [];var oi%s = [];\\n\' % (uid,uid)\n        prompt = [self.prompt(table) for table in self.tables]\n        vr += \'var pr%s = ["\' % uid + \'","\'.join([str(p) for p in prompt]) + \'"];\\n\' \n        f_inp = SQLFORM.widgets.string.widget(f,v)\n        f_id = f_inp[\'_id\']\n        f_inp[\'_type\'] = "hidden"\n        for tc, table in enumerate(self.tables):             \n            db = table._db     \n            format = table._format            \n            options = db(table[\'id\']>0).select()\n            id = str(table) + \'_\' + format[2:-2]             \n            opts = [OPTION(format % opt,_value=opt.id,\n                                 _parent=opt[str(parent)] if parent else \'0\') \\\n                                  for opt in options]\n            opts.insert(0, OPTION(prompt[tc],_value=0))\n            inp = SELECT(opts ,_parent=str(parent) + \\\n                                  "_" + str(parent_format),\n                                  _id=id,_name=id,\n                                  _disabled="disabled" if parent else None)\n            wrapper.append(TR(inp))\n            next = str(tc + 1)\n            vr += \'var p%s = jQuery("#%s #%s"); dd%s.push(p%s);\\n\' % (tc,d_id,id,uid,tc)            \n            vr += \'var i%s = jQuery("option",p%s).clone(); oi%s.push(i%s);\\n\' % (tc,tc,uid,tc)\n            fn_in = \'for (i=%s;i<%s;i+=1){dd%s[i].find("option").remove();\'\\\n                    \'dd%s[i].append(\\\'<option value="0">\\\' + pr%s[i] + \\\'</option>\\\');\'\\\n                    \'dd%s[i].attr("disabled","disabled");}\\n\' % \\\n                           (next,len(self.tables),uid,uid,uid,uid)\n            fn_in +=\'oi%s[%s].each(function(i){\'\\\n                    \'if (jQuery(this).attr("parent") == dd%s[%s].val()){\'\\\n                    \'dd%s[%s].append(this);}});\' % (uid,next,uid,tc,uid,next)            \n            fn_in += \'dd%s[%s].removeAttr("disabled");\\n\' % (uid,next)\n            fn_in += \'jQuery("#%s").val("");\' % f_id\n            if (tc < len(self.tables)-1):\n                fn += \'dd%s[%s].change(function(){%s});\\n\' % (uid,tc,fn_in) \n            else:\n                fn_in = \'jQuery("#%s").val(jQuery(this).val());\' % f_id\n                fn += \'dd%s[%s].change(function(){%s});\\n\' % (uid,tc,fn_in)\n                if v:\n                    fn += \'dd%s[%s].val(%s);\' % (uid,tc,v)                       \n            parent = table\n            parent_format = format[2:-2]\n\n        wrapper.append(f_inp)\n        wrapper.append(SCRIPT(vr,fn))\n        return wrapper\n                                               \ncascade = CascadingSelect(db.dependencia,db.departamento)\ncascade.prompt = lambda table: "Seleccione "  + ("una " if str(table)[0] in \'aeiou\' else "un ") + str(table)\ndb.auth_user.departamento.widget = cascade.widget\ndb.correspondencia.departamento_origen.widget = cascade.widget\ndb.correspondencia.departamento_destino.widget = cascade.widget\n\ndb.define_table(\'correspondencia_archive\',\n   Field(\'current_record\', \'reference correspondencia\'), db.correspondencia)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/perdomor/web2py/gluon/restricted.py", line 209, in restricted\n    exec ccode in environment\n  File "/home/perdomor/web2py/applications/sicoin/models/db.py", line 242, in <module>\n    Field(\'current_record\', \'reference correspondencia\'), db.correspondencia)\n  File "/home/perdomor/web2py/gluon/dal.py", line 7095, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/perdomor/web2py/gluon/dal.py", line 7126, in lazy_define_table\n    polymodel=polymodel)\n  File "/home/perdomor/web2py/gluon/dal.py", line 933, in create_table\n    fake_migrate=fake_migrate)\n  File "/home/perdomor/web2py/gluon/dal.py", line 1039, in migrate_table\n    self.execute(sub_query)\n  File "/home/perdomor/web2py/gluon/dal.py", line 1671, in execute\n    return self.log_execute(*a, **b)\n  File "/home/perdomor/web2py/gluon/dal.py", line 1665, in log_execute\n    ret = self.cursor.execute(*a, **b)\n  File "/home/perdomor/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/perdomor/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1025, u"Error on rename of \'./db_sicoin/#sql-461_a2\' to \'./db_sicoin/correspondencia_archive\' (errno: 150)")\n'
p11
s.