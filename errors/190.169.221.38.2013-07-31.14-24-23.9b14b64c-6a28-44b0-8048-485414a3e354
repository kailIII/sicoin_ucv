(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'pedro ochoa'"
p3
sS'layer'
p4
S'/var/web2py/applications/sicoin/controllers/correspondencia.py'
p5
sS'code'
p6
S'# coding: utf8\nT.force(\'es\')\nfrom plugin_solidform import SOLIDFORM\n\n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'master\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'analista\'))\ndef listar_correspondencias():\n    session.pag_editar = URL("editar_correspondencia")\n    session.pag_previa = URL(\'listar_correspondencias\')\n    db.correspondencia.fecha_registro.readable = True\n    db.correspondencia.modificado_por.readable = True\n    db.correspondencia.registrado_por.readable = True\n    links = None \n    fields = [db.correspondencia.nro_de_documento, db.correspondencia.fecha_registro, db.correspondencia.tipo_de_documento,\n              db.correspondencia.estatus,db.correspondencia.remitente,db.correspondencia.destinatario,db.correspondencia.asunto,  \n              db.correspondencia.registrado_por, db.correspondencia.modificado_por,]\n    orderby = [~db.correspondencia.fecha_registro,] \n    if auth.has_membership(\'recepcionista\'):\n        deletable = False\n        editable=True\n        details = True\n        create=True\n    if auth.has_membership(\'analista\'):\n        deletable = False\n        editable=True\n        details = True\n        create=True\n    if auth.has_membership(\'supervisor\'):\n        deletable = False\n        editable=True\n        details = True\n        create=False\n    query = ((db.correspondencia.registrado_por==auth.user.id) | (db.correspondencia.asignado_a==auth.user.id))\n    if auth.has_membership(\'master\'):\n        deletable = False\n        editable=False\n        details = True\n        create=True\n        query = ((db.correspondencia.registrado_por==auth.user.id) | (db.correspondencia.asignado_a==auth.user.id))\n    links = [lambda row: A(TAG[\'\'](SPAN(_class="icon icon-list"),SPAN(\'Hist\xc3\xb3rico\', _class="buttontext button", _title="Hist\xc3\xb3rico")), _class="w2p_trap button btn popup", _href=URL(\'ver_historico\', args=[row.id])),\n             lambda row: A(TAG[\'\'](SPAN(_class="icon icon-user"),SPAN(\'CC a\', _class="buttontext button", _title="CC a")), _class="w2p_trap button btn popup", _href=URL(\'agregarCorrespondenciaMultiple2\', args=[row.id]))]\n    grid = SQLFORM.grid(query, fields = fields, user_signature=False, selectable = lambda ids: reporte_entregas(ids),deletable=deletable, editable=editable, details = details,create=create, csv=False, orderby = orderby, links = links)\n    return dict(grid = grid)\n\n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'master\'))\ndef listar_correspondencias_departamento():\n    #Corrige las busquedas por nombre, devolviendo el id y reconstruyendo el request\n    #corregirBusquedas()\n    session.pag_editar = URL("editar_correspondencia_departamento")\n    session.pag_previa = URL(\'listar_correspondencias_departamento\') \n    db.correspondencia.modificado_por.readable = True\n    db.correspondencia.registrado_por.readable = True\n    fields = [db.correspondencia.nro_de_documento,db.correspondencia.fecha_registro,\n              db.correspondencia.estatus,db.correspondencia.remitente,\n              db.correspondencia.destinatario,db.correspondencia.asunto, \n              db.correspondencia.registrado_por, db.correspondencia.modificado_por,]\n    orderby = [~db.correspondencia.fecha_registro,] \n    deletable = False\n    editable=True\n    details = True\n    create=False\n    db.correspondencia.nro_de_documento.writable = False\n    db.correspondencia.fecha_registro.writable = False\n    db.correspondencia.tipo_de_documento.writable = False\n    db.correspondencia.remitente.writable = False\n    db.correspondencia.departamento_origen.writable = False\n    db.correspondencia.destinatario.writable = False\n    db.correspondencia.departamento_destino.writable = False\n    db.correspondencia.asunto.writable = False\n    db.correspondencia.registrado_por.writable = False\n    links = [lambda row: A(TAG[\'\'](SPAN(_class="icon icon-list"),SPAN(\'Hist\xc3\xb3rico\', _class="buttontext button", _title="Hist\xc3\xb3rico")), _class="w2p_trap button btn popup", _href=URL(\'ver_historico\', args=[row.id]))]\n    query = (db.correspondencia.departamento_destino==auth.user.departamento)|(db.correspondencia.departamento_origen==auth.user.departamento)\n    #estatus = db.estatus.tipo_estatus == "archivado"\n    #constraints = {\'db.correspondencia.departamento_destino\':auth.user.departamento,\n    #               \'db.correspondencia.departamento_origen\':auth.user.departamento}\n    grid = SQLFORM.grid(query, fields = fields, user_signature=False, deletable=deletable, editable=editable, \n                        details = details,create=create, csv=False, orderby = orderby, links = links)\n    return dict(grid = grid)      \n      \n@auth.requires(auth.has_membership(\'master\'))\ndef listar_correspondencias_master(): \n    session.pag_previa = URL(\'listar_correspondencias_master\') \n    fields = [db.correspondencia.nro_de_documento,db.correspondencia.fecha_registro,db.correspondencia.estatus,db.correspondencia.remitente,db.correspondencia.destinatario,db.correspondencia.asunto,db.correspondencia.registrado_por, db.correspondencia.modificado_por,]\n    orderby = [~db.correspondencia.fecha_registro, db.correspondencia.departamento_origen, db.correspondencia.departamento_origen] \n    deletable = False\n    editable=False\n    details = True\n    create=False\n    db.correspondencia.registrado_por.writable = False\n    db.correspondencia.modificado_por.writable = False\n    links = [lambda row: A(TAG[\'\'](SPAN(_class="icon icon-list"),SPAN(\'Hist\xc3\xb3rico\', _class="buttontext button", _title="Hist\xc3\xb3rico")), _class="w2p_trap button btn popup", _href=URL(\'ver_historico\', args=[row.id]))]\n    query =db.correspondencia \n    grid = SQLFORM.grid(query, fields = fields, user_signature=False, deletable=deletable, editable=editable, \n                        details = details,create=create, csv=False, orderby = orderby, links = links)\n    return dict(grid = grid)\n\n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'master\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'analista\'))\ndef agregar_correspondencia():\n    session.pag_previa = URL(\'agregar_correspondencia\') \n    request_fields = request.vars.fields or \'default\'\n    asignados = usuariosDepartamento()\n\n################################ The core ######################################\n    # Specify structured fields for the multi-line form layout.\n    # A "None" indicates an empty line over which the precedent line spans\n    if request_fields == \'default\':\n        fields = [\n                  [\'nro_de_documento\', \'fecha_correspondencia\'],\n                  [\'tipo_de_documento\', \'estatus\'],\n                  \'asunto\',\n                  [\'departamento_origen\', \'departamento_destino\'],\n                  [None, None],\n                  [\'remitente\', \'destinatario\'],\n                  [None, \'observaciones\'],\n                  \'asignado_a\'\n                  ]\n    \n    form = SOLIDFORM(db.correspondencia, fields=fields, tabla = auth.archive)\n    if form.process(onsuccess=auth.archive).accepted:\n        session.flash = \'registro procesado con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias\'))\n    style = STYLE("""input[type="text"], textarea {width:100%; max-height: 50px;}\n                     .w2p_fw {padding-right: 10px; max-width:100%;}\n                     .w2p_fl {background: #eee;}\n                     .string {max-width: 300px;}\n                     .date {max-width: 80px;}""")\n    return dict(asignados = asignados,\n                form=DIV(style, form),\n                #form__factory=form_factory, form__readonly=form_readonly, form__edit=form_edit,\n                form_args=DIV(A(\'fields=default\', _href=URL(vars={\'fields\': \'default\'})), \' \',\n                               ))\n\n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'master\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'analista\'))\ndef ver_correspondencia():\n    id = request.args(1)\n    tabla = request.args(0)\n    fields = [\n                  [\'nro_de_documento\', \'fecha_correspondencia\'],\n                  [\'tipo_de_documento\', \'estatus\'],\n                  \'asunto\',\n                  [\'departamento_origen\', \'departamento_destino\'],\n                  [None, None],\n                  [\'remitente\', \'destinatario\'],\n                  [None, \'observaciones\'],\n                  [\'asignado_a\', \'registrado_por\'],\n                  [\'modificado_el\', \'modificado_por\'],\n                  ]\n\n    if (tabla == "activo"):\n        db.correspondencia.modificado_el.readable = True\n        db.correspondencia.modificado_por.readable = True\n        correspondencia = db(db.correspondencia.id==id).select().first()\n        form = SOLIDFORM(db.correspondencia, correspondencia, fields=fields, showid=False, readonly=True)\n    elif (tabla == "archivo"):\n        db.correspondencia_archive.modificado_el.readable = True\n        db.correspondencia_archive.modificado_por.readable = True\n        correspondencia = db(db.correspondencia_archive.id==id).select().first()\n        form = SOLIDFORM(db.correspondencia_archive, correspondencia, fields=fields, showid=False, readonly=True)\n    if form.accepts(request.vars, session):\n        session.flash = \'registro procesado con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias\'))\n     \n    style = STYLE("""input[type="text"], textarea {width:100%; max-height: 50px;}\n                     .w2p_fw {padding-right: 10px; max-width:100%;}\n                     .w2p_fl {background: #eee;}\n                     .string {max-width: 300px;}\n                     .date {max-width: 80px;}""")\n    return dict(id = id, form=DIV(style, form),\n                #form__factory=form_factory, form__readonly=form_readonly, form__edit=form_edit,\n                form_args=DIV(A(\'fields=default\', _href=URL(vars={\'fields\': \'default\'})), \' \',\n\n                               ))\n                            \n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'master\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'analista\'))\ndef editar_correspondencia():\n    session.pag_previa = URL(\'editar_correspondencia\') \n    id = request.args(0)\n    asignados = usuariosDepartamento()\n    fields = [\n                  [\'nro_de_documento\', \'fecha_correspondencia\'],\n                  [\'tipo_de_documento\', \'estatus\'],\n                  \'asunto\',\n                  [\'departamento_origen\', \'departamento_destino\'],\n                  [None, None],\n                  [\'remitente\', \'destinatario\'],\n                  [None, \'observaciones\'],\n                  [\'asignado_a\'],\n                  \n                  ]\n    if auth.has_membership(\'analista\'):\n        db.correspondencia.nro_de_documento.readable = True\n        db.correspondencia.nro_de_documento.writable = False\n        db.correspondencia.fecha_correspondencia.readable = True\n        db.correspondencia.fecha_correspondencia.writable = False\n        db.correspondencia.tipo_de_documento.readable = True\n        db.correspondencia.tipo_de_documento.writable = False\n        db.correspondencia.asunto.readable = True\n        db.correspondencia.asunto.writable = False\n        db.correspondencia.departamento_origen.readable = True\n        db.correspondencia.departamento_origen.writable = False\n        db.correspondencia.departamento_destino.readable = True\n        db.correspondencia.departamento_destino.writable = False\n        db.correspondencia.remitente.readable = True\n        db.correspondencia.remitente.writable = False\n        db.correspondencia.destinatario.readable = True\n        db.correspondencia.destinatario.writable = False        \n        db.correspondencia.asignado_a.readable = True\n        db.correspondencia.asignado_a.writable = False\n    if auth.has_membership(\'supervisor\'):\n        db.correspondencia.nro_de_documento.readable = True\n        db.correspondencia.nro_de_documento.writable = False\n        db.correspondencia.fecha_correspondencia.readable = True\n        db.correspondencia.fecha_correspondencia.writable = False\n        db.correspondencia.tipo_de_documento.readable = True\n        db.correspondencia.tipo_de_documento.writable = False\n        db.correspondencia.asunto.readable = True\n        db.correspondencia.asunto.writable = False\n        db.correspondencia.departamento_origen.readable = True\n        db.correspondencia.departamento_origen.writable = False\n        db.correspondencia.departamento_destino.readable = True\n        db.correspondencia.departamento_destino.writable = False\n        db.correspondencia.remitente.readable = True\n        db.correspondencia.remitente.writable = False\n        db.correspondencia.destinatario.readable = True\n        db.correspondencia.destinatario.writable = False        \n        db.correspondencia.asignado_a.readable = True\n        db.correspondencia.asignado_a.writable = False\n    #db.correspondencia.modificado_por.writable = True\n    #db.correspondencia.modificado_el.writable = True\n    correspondencia = db(db.correspondencia.id==id).select().first()\n    form = SOLIDFORM(db.correspondencia, correspondencia, fields=fields, showid=False, readonly=False)\n    if form.process(onsuccess=auth.archive).accepted:\n        session.flash = \'registro modificado con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias\'))\n     \n    style = STYLE("""input[type="text"], textarea {width:100%; max-height: 50px;}\n                     .w2p_fw {padding-right: 10px; max-width:100%;}\n                     .w2p_fl {background: #eee;}\n                     .string {max-width: 300px;}\n                     .date {max-width: 80px;}""")\n    return dict(asignados = asignados,\n                 form=DIV(style, form),\n                 #form__factory=form_factory, form__readonly=form_readonly, form__edit=form_edit,\n                 form_args=DIV(A(\'fields=default\', _href=URL(vars={\'fields\': \'default\'})), \' \',\n\n                               ))\n\n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'master\'))\ndef ver_correspondencia_departamento():\n    id = request.args(0)\n    fields = [\n                  [\'nro_de_documento\', \'fecha_correspondencia\'],\n                  [\'tipo_de_documento\', \'estatus\'],\n                  \'asunto\',\n                  [\'departamento_origen\', \'departamento_destino\'],\n                  [None, None],\n                  [\'remitente\', \'destinatario\'],\n                  [None, \'observaciones\'],\n                  [\'asignado_a\', \'registrado_por\'],\n                  [\'modificado_el\', \'modificado_por\'],\n                  ]\n    db.correspondencia.nro_de_documento.writable = False\n    db.correspondencia.fecha_registro.writable = False\n    db.correspondencia.tipo_de_documento.writable = False\n    db.correspondencia.remitente.writable = False\n    db.correspondencia.departamento_origen.writable = False\n    db.correspondencia.destinatario.writable = False\n    db.correspondencia.departamento_destino.writable = False\n    db.correspondencia.asunto.writable = False\n    db.correspondencia.registrado_por.writable = False\n    db.correspondencia.modificado_el.readable = True\n    db.correspondencia.modificado_por.readable = True\n    correspondencia = db(db.correspondencia.id==id).select().first()\n    form = SOLIDFORM(db.correspondencia, correspondencia, fields=fields, showid=False, readonly=True)\n\n    if form.accepts(request.vars, session):\n        session.flash = \'registro procesado con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias\'))\n     \n    style = STYLE("""input[type="text"], textarea {width:100%; max-height: 50px;}\n                     .w2p_fw {padding-right: 10px; max-width:100%;}\n                     .w2p_fl {background: #eee;}\n                     .string {max-width: 300px;}\n                     .date {max-width: 80px;}""")\n    return dict(id = id, form=DIV(style, form),\n                #form__factory=form_factory, form__readonly=form_readonly, form__edit=form_edit,\n                form_args=DIV(A(\'fields=default\', _href=URL(vars={\'fields\': \'default\'})), \' \',\n                               ))\n                              \n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'master\'))\ndef editar_correspondencia_departamento():\n    session.pag_previa = URL(\'editar_correspondencias_departamento\') \n    id = request.args(0)\n    asignados = usuariosDepartamento()\n    fields = [\n                  [\'nro_de_documento\', \'fecha_correspondencia\'],\n                  [\'tipo_de_documento\', \'estatus\'],\n                  \'asunto\',\n                  [\'departamento_origen\', \'departamento_destino\'],\n                  [None, None],\n                  [\'remitente\', \'destinatario\'],\n                  [None, \'observaciones\'],\n                  \'asignado_a\'\n                  ]\n    db.correspondencia.nro_de_documento.readable = True\n    db.correspondencia.nro_de_documento.writable = False\n    db.correspondencia.fecha_correspondencia.readable = True\n    db.correspondencia.fecha_correspondencia.writable = False\n    db.correspondencia.tipo_de_documento.readable = True\n    db.correspondencia.tipo_de_documento.writable = False\n    db.correspondencia.asunto.readable = True\n    db.correspondencia.asunto.writable = False\n    db.correspondencia.departamento_origen.readable = True\n    db.correspondencia.departamento_origen.writable = False\n    db.correspondencia.departamento_destino.readable = True\n    db.correspondencia.departamento_destino.writable = False\n    db.correspondencia.remitente.readable = True\n    db.correspondencia.remitente.writable = False\n    db.correspondencia.destinatario.readable = True\n    db.correspondencia.destinatario.writable = False        \n    db.correspondencia.asignado_a.readable = True\n    db.correspondencia.asignado_a.writable = True\n    \n    correspondencia = db(db.correspondencia.id==id).select().first()\n    form = SOLIDFORM(db.correspondencia, correspondencia, fields=fields, showid=False, readonly=False)\n    \n    if form.process(onsuccess=auth.archive).accepted:\n        session.flash = \'registro procesado con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias_departamento\'))     \n\n    style = STYLE("""input[type="text"], textarea {width:100%; max-height: 50px;}\n                     .w2p_fw {padding-right: 10px; max-width:100%;}\n                     .w2p_fl {background: #eee;}\n                     .string {max-width: 300px;}\n                     .date {max-width: 80px;}""")\n    return dict(asignados = asignados,\n                form=DIV(style, form),\n                #form__factory=form_factory, form__readonly=form_readonly, form__edit=form_edit,\n                form_args=DIV(A(\'fields=default\', _href=URL(vars={\'fields\': \'default\'})), \' \',\n                               ))\n                               \ndef ver_historico():\n    id_registro = request.args(0)\n    #<a href="/sicoin/correspondencia/ver_correspondencia/4" class="w2p_trap button btn"><span class="icon magnifier icon-zoom-in"></span><span title="View" class="buttontext button">Vista</span></a>\n    db.correspondencia.id.represent= lambda value, row: CENTER(A(TAG[\'\'](SPAN(_class="icon magnifier icon-zoom-in"),SPAN(\'\', _class="buttontext button")),_class="w2p_trap button btn", _href = URL(\'ver_correspondencia/activo\', args = str(value))))                                                                   \n                                                                          \n    rows_actual = db(db.correspondencia.id==id_registro).select(db.correspondencia.modificado_el,\n                                                                             db.correspondencia.modificado_por,\n                                                                             db.correspondencia.nro_de_documento,\n                                                                             db.correspondencia.tipo_de_documento,\n                                                                             db.estatus.tipo_estatus, \n                                                                             db.correspondencia.remitente,\n                                                                             db.correspondencia.departamento_origen,\n                                                                             db.correspondencia.destinatario,\n                                                                             db.correspondencia.departamento_destino,\n                                                                             db.correspondencia.asunto,\n                                                                             db.correspondencia.observaciones,\n                                                                             db.correspondencia.id,\n                                                                     left=[db.estatus.on(db.estatus.id==db.correspondencia.estatus)])\n    db.correspondencia_archive.id.represent= lambda value, row: CENTER(A(TAG[\'\'](SPAN(_class="icon magnifier icon-zoom-in"),SPAN(\'\', _class="buttontext button")),_class="w2p_trap button btn", _href = URL(\'ver_correspondencia/archivo\', args = str(value))))\n    rows = db(db.correspondencia_archive.current_record==id_registro).select(db.correspondencia_archive.modificado_el,\n                                                                             db.correspondencia_archive.modificado_por,\n                                                                             db.correspondencia_archive.nro_de_documento,\n                                                                             db.correspondencia_archive.tipo_de_documento,\n                                                                             db.estatus.tipo_estatus, \n                                                                             db.correspondencia_archive.remitente,\n                                                                             db.correspondencia_archive.departamento_origen,\n                                                                             db.correspondencia_archive.destinatario,\n                                                                             db.correspondencia_archive.departamento_destino,\n                                                                             db.correspondencia_archive.asunto,\n                                                                             db.correspondencia_archive.observaciones,\n                                                                             db.correspondencia_archive.id,\n                                                                     left=[db.estatus.on(db.estatus.id==db.correspondencia_archive.estatus)])\n\n    headers = {\'correspondencia_archive.modificado_el\':{\'label\':\'Modificado el\',\n                       \'class\':\'\', #class name of the header\n                       \'width\':\'\', #width in pixels or %\n                       \'truncate\': 16, #truncate the content to...\n                       \'selected\': False #agregate class selected to this column\n                       },\n               \'correspondencia_archive.modificado_por\':{\'label\':\'Modificado por\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'correspondencia_archive.nro_de_documento\':{\'label\':\'Nro Documento\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'correspondencia_archive.tipo_de_documento\':{\'label\':\'Tipo Documento\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'estatus.tipo_estatus\':{\'label\':\'Estatus\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'correspondencia_archive.remitente\':{\'label\':\'Remitente\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 50, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'correspondencia_archive.departamento_origen\':{\'label\':\'Dpto. Origen\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'correspondencia_archive.destinatario\':{\'label\':\'Destinatario\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 60, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n               \'correspondencia_archive.departamento_destino\':{\'label\':\'Depto. Destino\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n                \'correspondencia_archive.asunto\':{\'label\':\'Asunto\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'15%\', #width in pixels or %\n                            \'truncate\': 50, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n                \'correspondencia_archive.observaciones\':{\'label\':\'Observaciones\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'20%\', #width in pixels or %\n                            \'truncate\': 50, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n                \'correspondencia_archive.id\':{\'label\':\'Acci\xc3\xb3n\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'10%\', #width in pixels or %\n                            \'truncate\': 50, #truncate the content to...\n                            \'selected\': False, #agregate class selected to this column\n                            \'align\': \'center\'\n                            },\n           }\n    tabla = SQLTABLE(rows, headers = headers)\n    tabla_actual = SQLTABLE(rows_actual, truncate = 100)\n    return dict(table=tabla, tabla_actual =tabla_actual,id = id)\n    \n@auth.requires(auth.has_membership(\'recepcionista\') or auth.has_membership(\'master\') or auth.has_membership(\'supervisor\') or auth.has_membership(\'analista\'))\ndef listar_movimientos():\n    session.pag_previa = URL(\'listar_movimientos\') \n    links = None \n    fields = [db.correspondencia.nro_de_documento, db.correspondencia.tipo_de_documento,db.correspondencia.fecha_registro,\n              db.correspondencia.estatus,db.correspondencia.remitente,db.correspondencia.destinatario,db.correspondencia.asunto,]\n    orderby = [\'correspondencia.fecha_registro\',] \n    deletable = False\n    editable=True\n    details = True\n    create=True\n    documento = db(db.documento.tipo_de_documento=="movimiento").select(db.documento.id).first()\n    id_documento_movimiento = documento[\'id\']\n    query = (((db.correspondencia.registrado_por==auth.user.id) | (db.correspondencia.asignado_a==auth.user.id)) & (db.correspondencia.tipo_de_documento==id_documento_movimiento))\n    links = [lambda row: A(TAG[\'\'](SPAN(_class="icon icon-list"),SPAN(\'Hist\xc3\xb3rico\', _class="buttontext button", _title="Hist\xc3\xb3rico")), _class="w2p_trap button btn popup", _href=URL(\'ver_historico\', args=[row.id]))\n            ]\n    grid = SQLFORM.grid(query, fields = fields, selectable= lambda ids: reporte_entrega_movimiento(ids), user_signature=False, deletable=deletable, editable=editable, details = details,create=create, csv=False, orderby = orderby, links = links)\n    return dict(grid = grid)\n    \ndef reporte_entrega_movimiento(ids):\n    if not ids:\n        session.flash=\'No has seleccionado ninguna correspondencia\'\n    else: \n        #import gluon.contenttype\n        al_reporte=db(db.correspondencia.id.belongs(ids)).select(db.correspondencia.nro_de_documento, db.correspondencia.departamento_destino)\n        headers = {\'correspondencia.nro_de_documento\':{\'label\':\'Nro. Documento\',\n                       \'class\':\'\', #class name of the header\n                       \'width\':\'\', #width in pixels or %\n                       \'truncate\': 16, #truncate the content to...\n                       \'selected\': False #agregate class selected to this column\n                       },\n               \'correspondencia.departamento_destino\':{\'label\':\'Departamento Destino\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 16, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },           \n           }\n        tabla_actual = SQLTABLE(al_reporte, truncate = 100, headers = headers)\n        session.reporte_movimiento = tabla_actual\n        session.flash="Reporte Generado"\n        #response.headers[\'Content-Type\']=gluon.contenttype.contenttype(\'.js\')\n        #return \'alert("alerta en javascript");\'\n        #response.render();\n        #session.flash=al_reporte[1]        \n\treturn ()\n\t\ndef reporte_entregas(ids):\n    if not ids:\n        session.flash=\'No has seleccionado ninguna correspondencia\'\n    else: \n        #import gluon.contenttype\n\tfrom time import strftime\n\tdb.correspondencia.fecha_correspondencia.represent = lambda value, row : value.strftime(\'%d-%m-%Y\')\n        al_reporte=db(db.correspondencia.id.belongs(ids)).select(db.correspondencia.nro_de_documento, \n                                                                 db.correspondencia.departamento_destino,\n\t\t\t\t\t\t\t\t db.correspondencia.asunto, \n                                                                 db.correspondencia.fecha_correspondencia)\n        headers = {\'correspondencia.nro_de_documento\':{\'label\':\'Nro. Documento\',\n                       \'class\':\'\', #class name of the header\n                       \'width\':\'\', #width in pixels or %\n                       \'truncate\': 30, #truncate the content to...\n                       \'selected\': False #agregate class selected to this column\n                       },\n               \'correspondencia.departamento_destino\':{\'label\':\'Departamento Destino\',\n                            \'class\':\'\', #class name of the header\n                            \'width\':\'\', #width in pixels or %\n                            \'truncate\': 40, #truncate the content to...\n                            \'selected\': False #agregate class selected to this column\n                            },\n\t       \'correspondencia.asunto\':{\'label\':\'Asunto\',\n\t\t\t    \'class\':\'\',\n\t\t\t    \'width\':\'\',\n\t\t\t    \'truncate\':40,\n\t\t\t    \'selected\': False,\n\t  },\n\t       \'correspondencia.fecha_correspondencia\':{ \'label\': \'Fecha\',\n\t\t\t    \'class\': \'\',\n                            \'width\':\'\',\n                            \'truncate\':20,\n                            \'selected\': False\n\t\t\t},\n           }        \n\ttabla_actual = SQLTABLE(al_reporte, truncate = 100, headers = headers)\n        session.reporte = tabla_actual\n        #response.headers[\'Content-Type\']=gluon.contenttype.contenttype(\'.js\')\n        #return \'alert("alerta en javascript");\'\n        #response.render();\n        #session.flash=al_reporte[1]        \n\treturn ()\n\ndef devolver_mes(mes):\n    if mes == 1:\n        mes= "enero"\n    elif mes == 2:\n        mes= "febrero"\n    elif mes == 3:\n        mes= "marzo"\n    elif mes == 4:\n        mes= "abril"\n    elif mes == 5:\n        mes= "mayo"\n    elif mes == 6:\n        mes= "junio"\n    elif mes == 7:\n        mes= "julio"\n    elif mes == 8:\n        mes= "agosto"\n    elif mes == 9:\n        mes= "septiembre"    \n    elif mes == 10:\n        mes= "octubre"\n    elif mes == 11:\n        mes= "noviembre"\n    else:\n        mes = "diciembre"\n    return mes\n    \ndef usuariosDepartamento():\n    options = [OPTION(t.first_name + " " + t.last_name,_value=t.id) for t in db(db.auth_user.departamento==auth.user.departamento).select(db.auth_user.id, db.auth_user.first_name, db.auth_user.last_name)]\n    options.insert(0, OPTION(_value=""))\n    usuarios = SELECT(*options, _name="asignado_a", _id="correspondencia_asignados", _class="generic-widget")\n    #usuarios = db(db.auth_user.departamento==auth.user.departamento).select(db.auth_user.id, db.auth_user.first_name, db.auth_user.last_name)\n    return usuarios\n\ndef corregirBusquedas():\n    if (request.vars[\'keywords\']) and (\'correspondencia.tipo_de_documento =\' in request.vars[\'keywords\']):\n        documento = request.vars[\'keywords\'].split(\'= "\')[1].split(\'"\')[0]\n        id_tipodocumento = buscarTipoDocumento(documento)\n        if id_tipodocumento:\n            request.vars[\'keywords\'] = \'correspondencia.tipo_de_documento = "\' + id_tipodocumento + \'"\'\n        else:\n            request.vars[\'keywords\'] = \'correspondencia.tipo_de_documento = "0"\'\n    if (request.vars[\'keywords\']) and (\'correspondencia.estatus =\' in request.vars[\'keywords\']):\n        estatus = request.vars[\'keywords\'].split(\'= "\')[1].split(\'"\')[0]\n        id_estatus = buscarEstatus(estatus)\n        if id_estatus:\n            request.vars[\'keywords\'] = \'correspondencia.estatus = "\' + id_estatus + \'"\'\n        else:\n            request.vars[\'keywords\'] = \'correspondencia.estatus = "0"\'\n    if (request.vars[\'keywords\']) and (\'correspondencia.asignado_a =\' in request.vars[\'keywords\']):\n        usuario = request.vars[\'keywords\'].split(\'= "\')[1].split(\'"\')[0]\n        id_usuario = buscarUsuario(usuario)\n        if id_usuario:\n            request.vars[\'keywords\'] = \'correspondencia.asignado_a = "\' + id_usuario + \'"\'\n        else:\n            request.vars[\'keywords\'] = \'correspondencia.asignado_a = "0"\'\n    if (request.vars[\'keywords\']) and (\'correspondencia.departamento_origen =\' in request.vars[\'keywords\']):\n        departamento = request.vars[\'keywords\'].split(\'= "\')[1].split(\'"\')[0]\n        id_departamento = buscarDepartamento(departamento)\n        if id_departamento:\n            request.vars[\'keywords\'] = \'correspondencia.departamento_origen = "\' + id_departamento + \'"\'\n        else:\n            request.vars[\'keywords\'] = \'correspondencia.departamento_origen = "0"\'\n    if (request.vars[\'keywords\']) and (\'correspondencia.departamento_destino =\' in request.vars[\'keywords\']):\n        departamento = request.vars[\'keywords\'].split(\'= "\')[1].split(\'"\')[0]\n        id_departamento = buscarDepartamento(departamento)\n        if id_departamento:\n            request.vars[\'keywords\'] = \'correspondencia.departamento_destino = "\' + id_departamento + \'"\'\n        else:\n            request.vars[\'keywords\'] = \'correspondencia.departamento_destino = "0"\'\n    return None\n\ndef buscarTipoDocumento(tipodocumento):\n    busqueda = "%" + tipodocumento + "%"\n    try:\n        id_tipodocumento = db(db.documento.tipo_de_documento.like(busqueda)).select(db.documento.id).first()\n        if id_tipodocumento:\n            return str(id_tipodocumento[\'id\'])\n    except:\n        return None\n    \ndef buscarEstatus(estatus):\n    busqueda = "%" + estatus + "%"\n    try:\n        id_estatus = db(db.estatus.tipo_estatus.like(busqueda)).select(db.estatus.id).first()\n        if id_estatus:\n            return str(id_estatus[\'id\'])\n    except:\n        return None\n    \ndef buscarUsuario(usuario):\n    busqueda = "%" + usuario + "%"\n    try:\n        id_usuario = db((db.auth_user.first_name.like(busqueda)) | (db.auth_user.last_name.like(busqueda))).select(db.auth_user.id).first()\n        if id_usuario:\n            return str(id_usuario[\'id\'])\n    except:\n        return None\n    \ndef buscarDepartamento(departamento):\n    busqueda = "%" + departamento + "%"\n    try:\n        id_departamento = db(db.departamento.departamento.like(busqueda)).select(db.departamento.id).first()\n        if id_departamento:\n            return str(id_departamento[\'id\'])\n    except:\n        return None\n    \ndef correspondenciasDependencia():\n    session.documento = \'\'\n    session.dependencia = \'\'\n    form = SQLFORM.factory(Field(\'documento\',label = \'Tipo de Documento\', requires= IS_IN_DB(db, db.documento.id, \'%(tipo_de_documento)s\', \n                                                                                             zero =\'Seleccione un tipo de documento\')),\n                           Field(\'dependencia\', requires= IS_IN_DB(db, db.dependencia.id, \'%(dependencia)s\',\n                                                                   zero =\'Seleccione una dependencia\')),\n                           submit_button=\'Enviar\')\n    #form = SQLFORM.factory(db.documento, db.dependencia)\n    if form.process().accepted:\n        session.documento = form.vars.documento\n        session.dependencia = form.vars.dependencia\n        redirect(URL(\'/agregarCorrespondenciaMultiple\'))\n    else:\n        session.flash=\'Ha ocurrido un error\'\n    return dict(form = form)\n    \ndef agregarCorrespondenciaMultiple():\n    request_fields = request.vars.fields or \'default\'\n\n################################ The core ######################################\n    # Specify structured fields for the multi-line form layout.\n    # A "None" indicates an empty line over which the precedent line spans\n    if request_fields == \'default\':\n        fields = [\n                  [\'nro_de_documento\', \'fecha_correspondencia\'],\n                  [\'tipo_de_documento\', \'estatus\'],\n                  \'asunto\',\n                  [None, None],\n                  [\'remitente\', \'destinatario\'],\n                  [None, \'observaciones\'],\n                  ]\n    form = SOLIDFORM(db.correspondencia, fields=fields, tabla = auth.archive)\n    if form.process(onsuccess=auth.archive).accepted:\n        db.rollback()\n        usuario = db(db.auth_user.departamento==auth.user.departamento).select(db.auth_user.departamento).first()\n        departamentoUsuario = db(db.departamento.id==usuario[\'departamento\']).select(db.departamento.id).first()\n        documento = db(db.documento.id==session.documento).select(db.documento.tipo_de_documento).first()\n        dependencia = db(db.dependencia.id==session.dependencia).select(db.dependencia.id).first()\n        departamentos = db(db.departamento.dependencia==session.dependencia).select(db.departamento.id)\n        db.correspondencia.destinatario.readable = False\n        db.correspondencia.destinatario.writable = False\n        for departamento in departamentos:\n            if departamentoUsuario[\'id\'] == departamento[\'id\']:\n                continue\n            else:\n                db.correspondencia.insert(nro_de_documento = form.vars.nro_de_documento, fecha_correspondencia = form.vars.fecha_correspondencia,\n                                      tipo_de_documento = form.vars.tipo_de_documento, estatus = form.vars.estatus,\n                                      remitente = form.vars.remitente, departamento_origen = departamentoUsuario[\'id\'],\n                                      destinatario = form.vars.destinatario, departamento_destino = departamento[\'id\'],\n                                      asunto = form.vars.asunto, observaciones = form.vars.observaciones )\n        \n        session.flash = \'Han sido registrado los documento con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias\'))\n    style = STYLE("""input[type="text"], textarea {width:100%; max-height: 50px;}\n                     .w2p_fw {padding-right: 10px; max-width:100%;}\n                     .w2p_fl {background: #eee;}\n                     .string {max-width: 300px;}\n                     .date {max-width: 80px;}""")\n    return dict(form=DIV(style, form),\n                #form__factory=form_factory, form__readonly=form_readonly, form__edit=form_edit,\n                form_args=DIV(A(\'fields=default\', _href=URL(vars={\'fields\': \'default\'})), \' \',\n                               ))\n\ndef agregarCorrespondenciaMultiple2():\n    options = [OPTION(t.first_name + " " + t.last_name,_value=t.id) for t in db(db.auth_user.departamento).select(db.auth_user.id, db.auth_user.first_name, db.auth_user.last_name)]\n    usuarios = SELECT(*options, _name="usuarios", _class="chzn-select", _multiple=\'\', _style="width:400px")\n    error = \'\'\n    if request.vars[\'formcc\'] and request.vars[\'usuarios\']:\n        usuarios = request.vars[\'usuarios\']\n        id_correspondencia = request.args(0)\n        correspondencia = db.correspondencia[id_correspondencia]  \n        for usuario in usuarios:\n            usuario = int(usuario)\n            registro_usuario = db(db.auth_user.id==usuario).select(db.auth_user.departamento).first()\n            correspondencia_nueva = db.correspondencia.insert(**db.correspondencia._filter_fields(correspondencia))\n            correspondencia_nueva.update_record(fecha_registro = request.now, asignado_a = usuario,\n                                                registrado_por = auth.user.id, modificado_por = auth.user.id,\n                                                departamento_destino = registro_usuario[\'departamento\'],\n                                                modificado_el = request.now)\n        session.flash = \'Copias creadas con \xc3\xa9xito\'\n        redirect(URL(\'/listar_correspondencias\'))\n    if request.vars[\'formcc\'] and not request.vars[\'usuarios\']:\n        error = DIV(\'Seleccione al menos un usuario\', _class="error", _style="display: inline-block; ")\n        print request.vars[\'usuarios\']\n    \n    return dict(usuarios = usuarios, error = error)\n\ndef ver_actual():\n    try:\n        id_registro = request.args(0)\n        rows = db(db.correspondencia.id==id_registro).select(db.correspondencia.modificado_el,\n                                                                                 db.correspondencia.modificado_por,\n                                                                                 db.correspondencia.nro_de_documento,\n                                                                                 db.correspondencia.tipo_de_documento,\n                                                                                 db.estatus.tipo_estatus, \n                                                                                 db.correspondencia.remitente,\n                                                                                 db.correspondencia.departamento_origen,\n                                                                                 db.correspondencia.destinatario,\n                                                                                 db.correspondencia.departamento_destino,\n                                                                                 db.correspondencia.asunto,\n                                                                                 db.correspondencia.observaciones,\n                                                                         left=[db.estatus.on(db.estatus.id==db.correspondencia.estatus)])\n    \n        headers = {\'correspondencia.modificado_el\':{\'label\':\'Modificado el\',\n                           \'class\':\'\', #class name of the header\n                           \'width\':\'\', #width in pixels or %\n                           \'truncate\': 16, #truncate the content to...\n                           \'selected\': False #agregate class selected to this column\n                           },\n                   \'correspondencia.modificado_por\':{\'label\':\'Modificado por\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 16, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'correspondencia.nro_de_documento\':{\'label\':\'Nro Documento\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 16, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'correspondencia.tipo_de_documento\':{\'label\':\'Tipo Documento\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 16, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'estatus.tipo_estatus\':{\'label\':\'Estatus\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 16, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'correspondencia.remitente\':{\'label\':\'Remitente\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 50, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'correspondencia.departamento_origen\':{\'label\':\'Dpto. Origen\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 16, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'correspondencia.destinatario\':{\'label\':\'Destinatario\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 60, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                   \'correspondencia.departamento_destino\':{\'label\':\'Depto. Destino\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'\', #width in pixels or %\n                                \'truncate\': 16, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                    \'correspondencia.asunto\':{\'label\':\'Asunto\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'15%\', #width in pixels or %\n                                \'truncate\': 50, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n                    \'correspondencia.observaciones\':{\'label\':\'Observaciones\',\n                                \'class\':\'\', #class name of the header\n                                \'width\':\'20%\', #width in pixels or %\n                                \'truncate\': 50, #truncate the content to...\n                                \'selected\': False #agregate class selected to this column\n                                },\n               }\n        tabla_actual = SQLTABLE(rows, headers = headers)\n        return dict(tabla_actual = tabla_actual)\n    except:\n        return dict()\n\nresponse._vars=response._caller(listar_correspondencias_departamento)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/var/web2py/applications/sicoin/controllers/correspondencia.py", line 827, in <module>\n  File "/var/web2py/gluon/globals.py", line 188, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/web2py/gluon/tools.py", line 2911, in f\n    return action(*a, **b)\n  File "/var/web2py/applications/sicoin/controllers/correspondencia.py", line 76, in listar_correspondencias_departamento\n    details = details,create=create, csv=False, orderby = orderby, links = links)\n  File "/var/web2py/gluon/sqlhtml.py", line 2095, in grid\n    *table_fields)\n  File "/var/web2py/gluon/dal.py", line 8788, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/var/web2py/gluon/dal.py", line 1603, in select\n    sql = self._select(query, fields, attributes)\n  File "/var/web2py/gluon/dal.py", line 1463, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/var/web2py/gluon/dal.py", line 1296, in expand\n    return op(first, second)\n  File "/var/web2py/gluon/dal.py", line 1179, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/var/web2py/gluon/dal.py", line 1296, in expand\n    return op(first, second)\n  File "/var/web2py/gluon/dal.py", line 1224, in EQ\n    self.expand(second, first.type))\n  File "/var/web2py/gluon/dal.py", line 1306, in expand\n    return str(self.represent(expression,field_type))\n  File "/var/web2py/gluon/dal.py", line 1739, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'pedro ochoa\'\n'
p11
s.